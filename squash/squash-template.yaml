apiVersion: v1
kind: Template
message: |-
  For more information about using this template, including OpenShift considerations, see https://github.com/dwojciec/squash/blob/master/README.md.
metadata:
  annotations:
    description: |-
      An example Squash application. For more information about using this template, including OpenShift considerations, see https://github.com/dwojciec/squash/blob/master/README.md.
      WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.
    iconClass: icon-other-unknown
    openshift.io/display-name: Squash
    openshift.io/documentation-url: https://github.com/soloio/squash
    openshift.io/long-description: This template defines resources needed to deploy
      Squash application, including deployment of Squash server
      and databSquash client as daemonset. A route is created to expose Squash Server.
      This configuration should be used for test purposes only.
    openshift.io/provider-display-name: solo.io.
    openshift.io/support-url: https://www.solo.io/
    tags: debug,solo,squash
    template.openshift.io/bindable: "false"
    version: 0.2.1
  name: squash-template
  template: squash-template
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: squash-client
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: squash-server
- apiVersion: v1
  kind: Service
  metadata:
    name: squash-server
  spec:
    ports:
    - name: http-squash-api
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: squash-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    name: squash-server
  spec:
    host: ${APPLICATION_DOMAIN}
    port:
      targetPort: http-squash-api
    to:
      kind: Service
      name: squash-server
      weight: 100
    wildcardPolicy: None
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      description: Defines how to deploy the squash server
    labels:
      app: squash-server
    name: squash-server
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        app: squash-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: squash-server
      spec:
        containers:
        - image: soloio/squash-server:v0.2.1
          imagePullPolicy: IfNotPresent
          name: squash-server
          ports:
          - containerPort: 8080
            name: http-squash-api
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: squash-server
        serviceAccountName: squash-server
        terminationGracePeriodSeconds: 30
- apiVersion: extensions/v1beta1
  kind: DaemonSet
  metadata:
    labels:
      app: squash-client
    name: squash-client
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: squash-client
    template:
      metadata:
        labels:
          app: squash-client
      spec:
        containers:
        - env:
          - name: SERVERURL
            value: http://$(SQUASH_SERVER_SERVICE_HOST):$(SQUASH_SERVER_SERVICE_PORT_HTTP_SQUASH_API)
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: HOST_ADDR
            value: $(POD_NAME).$(POD_NAMESPACE)
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: soloio/squash-client:v0.2.1
          imagePullPolicy: IfNotPresent
          name: squash-client
          ports:
          - containerPort: 1234
            protocol: TCP
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/cri.sock
            name: crisock
        dnsPolicy: ClusterFirst
        hostPID: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: squash-client
        serviceAccountName: squash-client
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /var/run/dockershim.sock
            type: ""
          name: crisock
parameters:
- description: The exposed hostname that will route to the Squashserver service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN